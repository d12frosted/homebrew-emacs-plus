From 5d1417052bb7e12f011e67c2a48499ca671679c8 Mon Sep 17 00:00:00 2001
From: Boris Buliga <boris@d12frosted.io>
Date: Sat, 21 Dec 2024 09:11:36 -0800
Subject: [PATCH] provide a way to make undecorated frame with round corners (fixed version for Emacs 31)

---
 src/frame.c  |  3 +++
 src/frame.h  |  4 ++++
 src/nsfns.m  |  6 ++++++
 src/nsterm.h |  2 ++
 src/nsterm.m | 54 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 5 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/src/frame.c b/src/frame.c
index 36b314c075e..32e00e36546 100644
--- a/src/frame.c
+++ b/src/frame.c
@@ -1008,6 +1008,7 @@ make_frame (bool mini_p)
   f->horizontal_scroll_bars = false;
   f->want_fullscreen = FULLSCREEN_NONE;
   f->undecorated = false;
+  f->undecorated_round = false;
 #ifndef HAVE_NTGUI
   f->override_redirect = false;
 #endif
@@ -4304,6 +4305,7 @@ DEFUN ("frame-scale-factor", Fframe_scale_factor, Sframe_scale_factor,
   {"tool-bar-position",		SYMBOL_INDEX (Qtool_bar_position)},
   {"inhibit-double-buffering",  SYMBOL_INDEX (Qinhibit_double_buffering)},
   {"undecorated",		SYMBOL_INDEX (Qundecorated)},
+  {"undecorated-round",		SYMBOL_INDEX (Qundecorated_round)},
   {"parent-frame",		SYMBOL_INDEX (Qparent_frame)},
   {"skip-taskbar",		SYMBOL_INDEX (Qskip_taskbar)},
   {"no-focus-on-map",		SYMBOL_INDEX (Qno_focus_on_map)},
@@ -6579,6 +6581,7 @@ syms_of_frame (void)
   DEFSYM (Qicon, "icon");
   DEFSYM (Qminibuffer, "minibuffer");
   DEFSYM (Qundecorated, "undecorated");
+  DEFSYM (Qundecorated_round, "undecorated-round");
   DEFSYM (Qno_special_glyphs, "no-special-glyphs");
   DEFSYM (Qparent_frame, "parent-frame");
   DEFSYM (Qskip_taskbar, "skip-taskbar");
diff --git a/src/frame.h b/src/frame.h
index 9ed2f66be22..7d776f01d28 100644
--- a/src/frame.h
+++ b/src/frame.h
@@ -445,6 +445,9 @@ #define EMACS_FRAME_H
   /* True if this is an undecorated frame.  */
   bool_bf undecorated : 1;
 
+  /* True if this is an undecorated frame with round corners.  */
+  bool_bf undecorated_round : 1;
+
   /* Nonzero if this frame's window does not want to receive input focus
      via mouse clicks or by moving the mouse into it.  */
   bool_bf no_accept_focus : 1;
@@ -1237,6 +1240,7 @@ FRAME_PARENT_FRAME (struct frame *f)
 }
 
 #define FRAME_UNDECORATED(f) ((f)->undecorated)
+#define FRAME_UNDECORATED_ROUND(f) ((f)->undecorated_round)
 
 #if defined (HAVE_WINDOW_SYSTEM)
 #ifdef HAVE_NTGUI
diff --git a/src/nsfns.m b/src/nsfns.m
index 1055a4b37df..03b23e8a2fe 100644
--- a/src/nsfns.m
+++ b/src/nsfns.m
@@ -1102,6 +1102,7 @@ Turn the input menu (an NSMenu) into a lisp list for tracking on lisp side.
   ns_set_tool_bar_position,
   ns_set_inhibit_double_buffering,
   ns_set_undecorated,
+  ns_set_undecorated_round,
   ns_set_parent_frame,
   0, /* x_set_skip_taskbar */
   ns_set_no_focus_on_map,
@@ -1405,6 +1406,11 @@ Turn the input menu (an NSMenu) into a lisp list for tracking on lisp side.
   FRAME_UNDECORATED (f) = !NILP (tem) && !EQ (tem, Qunbound);
   store_frame_param (f, Qundecorated, FRAME_UNDECORATED (f) ? Qt : Qnil);
 
+  tem = gui_display_get_arg (dpyinfo, parms, Qundecorated_round, NULL, NULL,
+                             RES_TYPE_BOOLEAN);
+  FRAME_UNDECORATED_ROUND (f) = !NILP (tem) && !EQ (tem, Qunbound);
+  store_frame_param (f, Qundecorated_round, FRAME_UNDECORATED_ROUND (f) ? Qt : Qnil);
+
 #ifdef NS_IMPL_COCOA
   tem = gui_display_get_arg (dpyinfo, parms, Qns_appearance, NULL, NULL,
                              RES_TYPE_SYMBOL);
diff --git a/src/nsterm.h b/src/nsterm.h
index 6c67653705e..f308b3443d9 100644
--- a/src/nsterm.h
+++ b/src/nsterm.h
@@ -1226,6 +1226,8 @@ #define NSAPP_DATA2_RUNFILEDIALOG 11
 extern void ns_iconify_frame (struct frame *f);
 extern void ns_set_undecorated (struct frame *f, Lisp_Object new_value,
                                 Lisp_Object old_value);
+extern void ns_set_undecorated_round (struct frame *f, Lisp_Object new_value,
+                                      Lisp_Object old_value);
 extern void ns_set_parent_frame (struct frame *f, Lisp_Object new_value,
                                  Lisp_Object old_value);
 extern void ns_set_no_focus_on_map (struct frame *f, Lisp_Object new_value,
diff --git a/src/nsterm.m b/src/nsterm.m
index c705a3c78f4..707f16d8de5 100644
--- a/src/nsterm.m
+++ b/src/nsterm.m
@@ -1810,6 +1810,44 @@ Hide the window (X11 semantics)
     }
 }
 
+void
+ns_set_undecorated_round (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
+/* --------------------------------------------------------------------------
+     Set frame F's `undecorated_round' parameter.  If non-nil, F's window-system
+     window is drawn without decorations, title, minimize/maximize boxes
+     and external borders.  This usually means that the window cannot be
+     dragged, resized, iconified, maximized or deleted with the mouse.  If
+     nil, draw the frame with all the elements listed above unless these
+     have been suspended via window manager settings.
+   -------------------------------------------------------------------------- */
+{
+  NSTRACE ("ns_set_undecorated_round");
+
+  if (!EQ (new_value, old_value))
+    {
+      EmacsView *view = (EmacsView *)FRAME_NS_VIEW (f);
+      NSWindow *oldWindow = [view window];
+      NSWindow *newWindow;
+
+      block_input ();
+
+      FRAME_UNDECORATED_ROUND (f) = !NILP (new_value);
+
+      newWindow = [[EmacsWindow alloc] initWithEmacsFrame:f];
+
+      if ([oldWindow isKeyWindow])
+        [newWindow makeKeyAndOrderFront:NSApp];
+
+      [newWindow setIsVisible:[oldWindow isVisible]];
+      if ([oldWindow isMiniaturized])
+        [newWindow miniaturize:NSApp];
+
+      [oldWindow close];
+
+      unblock_input ();
+    }
+}
+
 void
 ns_set_parent_frame (struct frame *f, Lisp_Object new_value, Lisp_Object old_value)
 /* --------------------------------------------------------------------------
@@ -9277,6 +9315,11 @@ - (instancetype) initWithEmacsFrame: (struct frame *) f
 		 | NSWindowStyleMaskMiniaturizable
 		 | NSWindowStyleMaskClosable);
 
+  if (FRAME_UNDECORATED_ROUND (f))
+    {
+      styleMask |= NSFullSizeContentViewWindowMask;
+    }
+
   last_drag_event = nil;
 
   width = FRAME_TEXT_COLS_TO_PIXEL_WIDTH (f, f->text_cols);
@@ -9360,13 +9403,22 @@ - (instancetype) initWithEmacsFrame: (struct frame *) f
 #endif
     }
 
+  if (FRAME_UNDECORATED_ROUND (f))
+    {
+      [self setTitlebarAppearsTransparent:YES];
+      [self setTitleVisibility:NSWindowTitleHidden];
+      [[self standardWindowButton:NSWindowCloseButton] setHidden:YES];
+      [[self standardWindowButton:NSWindowMiniaturizeButton] setHidden:YES];
+      [[self standardWindowButton:NSWindowZoomButton] setHidden:YES];
+    }
+
   return self;
 }
 
 
 - (void)createToolbar: (struct frame *)f
 {
-  if (FRAME_UNDECORATED (f)
+  if (FRAME_UNDECORATED (f) || FRAME_UNDECORATED_ROUND (f)
       || [self styleMask] == NSWindowStyleMaskBorderless
       || !FRAME_EXTERNAL_TOOL_BAR (f)
       || [self toolbar] != nil)
-- 
2.47.0

