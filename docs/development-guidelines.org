:PROPERTIES:
:ID:                     eaf232f9-0670-4ba0-84f8-61bf966ce3ad
:END:
#+TITLE: Development guidelines

Over the time =emacs-plus= grow with different utilities for adding new features and maintaining the formula. The goal of this document is to describe important bits of this process.

* Table of Contents :TOC:
:PROPERTIES:
:ID:                     6acf165f-6779-44b6-94de-e9af8c375f8f
:END:
- [[#pull-requests][Pull requests]]
- [[#ci][CI]]
- [[#options][Options]]
- [[#patches][Patches]]
- [[#building-locally][Building locally]]
- [[#questions][Questions?]]

* Pull requests
:PROPERTIES:
:ID:                     75cbac42-175d-443b-937b-b3061c9d8693
:END:

Any change to the formula should go through pull requests. Exception for this guideline is resource hash fix (e.g. when patch is changed and for some reason hash is invalid).

Pull requests give visibility to the users watching this repository. And thanks to [[#ci][→ CI]] pull requests changes are built in different configurations. So it's harder to break the formula.

* CI
:PROPERTIES:
:ID:                     d9580cb6-6484-45fa-9337-355182812ac0
:END:

We've been using GitHub workflows to run builds. Main targets are:

- Emacs 26
- Emacs 27
- Emacs 28
- Emacs 29
- Emacs 30

Where it's applicable, we also run builds with different [[#options][→ options]]. The lesser options are available, the easier it is to cover all scenarios. Right now coverage is not the goal.

* Options
:PROPERTIES:
:ID:                     c2302f04-d2ff-4f53-a846-036a51bc9426
:END:

Rule of thumb here is simple. If the new feature (e.g. patch) is not experimental nor controversial, it's better to add it unconditionally. In ideal world, all features should be controllable via Emacs Lisp, not via compilation flag and the only options should be version and icon choice.

* Patches
:PROPERTIES:
:ID:                     a2b77ea1-85a9-4088-8100-d8b60d580548
:END:

Every patch must be added to this repository. No exceptions. Rationale is simple - external location is not controlled by =emacs-plus= maintainers, but if something happens to the patch outside this repository, =emacs-plus= suffers.

In order to help with [[#pull-requests][→ Pull requests]] and [[#ci][→ CI]], =emacs-plus= has some utilities that load resources and patches from the local copy of repository, even on CI. So instead of using static link to the patch

#+begin_src ruby
  patch do
     url "https://raw.githubusercontent.com/d12frosted/homebrew-emacs-plus/master/patches/system-appearance.patch"
     sha256 "2a0ce452b164eee3689ee0c58e1f47db368cb21b724cda56c33f6fe57d95e9b7"
   end
#+end_src

One should use =local_patch= utility function provided by =EmacsBase=:

#+begin_src ruby
  local_patch "system-appearance", sha: "2a0ce452b164eee3689ee0c58e1f47db368cb21b724cda56c33f6fe57d95e9b7"
#+end_src

So even if you are preparing PR, add the patch to this repository.

* Building locally
:PROPERTIES:
:ID:                     7e242947-fce6-4f35-9fe5-84cfa7124663
:END:

Sometimes there is a need to test the build locally without uninstalling =emacs-plus= (otherwise it's impossible to make any further fixes or improvements if the build breaks). For this reason, =emacs-plus= repository has a =build= script, which installs =emacs-plus-local= with passed options.

#+begin_src bash
  $ ./build VERSION [options]
  $ ./build 26
  $ ./build 27
  $ ./build 27 --with-no-titlebar
  $ ./build 28
  $ ./build 28 --with-no-titlebar
#+end_src

This script is super simple. It makes a copy of =emacs-plus= named =emacs-plus-local= and installs it. That way you can play with formula without uninstalling =emacs-plus=.

* Questions?
:PROPERTIES:
:ID:                     403053e1-8b05-451b-8839-0a4f670c8aa4
:END:

Having questions is good. Asking them is even better. Feel free to open an issue or contact me via email (you can find it in my profile on GitHub or check the committer email).
